{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","useState","setMonsters","useEffect","fetch","then","response","json","users","setFilteredMonsters","searchField","setSearchField","filteredMonsters","filter","toLowerCase","includes","e","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4SACaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAA4BL,EAAMI,QAAQE,MAAjCN,EAAMI,QAAQC,IACvB,4BAAIL,EAAMI,QAAQG,YCHbC,G,MAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAChB,cAAC,EAAD,CAAMA,QAASA,WCHdO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MC6BjEG,MA3Bf,WAAgB,IAAD,EAEmBC,mBAAS,IAF5B,mBAENR,EAFM,KAEIS,EAFJ,KAIbC,qBAAU,WACRC,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MACpF,SAAAG,GAAWN,EAAYM,GAAQC,EAAoBD,QAEpD,IARU,MAUyBP,mBAAS,IAVlC,mBAUNS,EAVM,KAUOC,EAVP,OAYmCV,mBAAS,IAZ5C,mBAYNW,EAZM,KAYYH,EAZZ,KAkBb,OAJAN,qBAAU,WACRM,EAAoBhB,EAASoB,QAAO,SAACzB,GAAD,OAAaA,EAAQE,KAAKwB,cAAcC,SAASL,EAAYI,qBAChG,CAACJ,IAGF,sBAAKzB,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWY,aAAc,SAACmB,GAAD,OAAOL,EAAeK,EAAEC,OAAOC,QAAQtB,YAAY,oBAC5E,cAAC,EAAD,CAAUH,SAAUmB,QCfXO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3db9f207.chunk.js","sourcesContent":["import \"./card.styles.css\";\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2 key={props.monster.id}>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div >\r\n)","import { Card } from \"../card/card.component\";\r\nimport \"./card-list.styles.css\";\r\nexport const CardList = (props) => (\r\n    <div className=\"card-list\">\r\n        {props.monsters.map((monster) =>\r\n            <Card monster={monster} />\r\n        )}\r\n    </div>\r\n)","import \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange} />\r\n)","import { useEffect, useState } from \"react\";\nimport './App.css';\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nfunction App() {\n\n  const [monsters, setMonsters] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json()).then(\n      users => { setMonsters(users); setFilteredMonsters(users); }\n    );\n  }, []);\n\n  const [searchField, setSearchField] = useState(\"\");\n\n  const [filteredMonsters, setFilteredMonsters] = useState([]);\n\n  useEffect(() => {\n    setFilteredMonsters(monsters.filter((monster) => monster.name.toLowerCase().includes(searchField.toLowerCase())))\n  }, [searchField])\n\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox handleChange={(e) => setSearchField(e.target.value)} placeholder=\"Search Monsters\" />\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}